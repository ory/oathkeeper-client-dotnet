/*
 * ORY Oathkeeper
 *
 * ORY Oathkeeper is a reverse proxy that checks the HTTP Authorization for validity against a set of rules. This service uses Hydra to validate access tokens and policies.
 *
 * The version of the OpenAPI document: v0.40.8
 * Contact: hi@ory.am
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ory.Oathkeeper.Client.Client.OpenAPIDateConverter;

namespace Ory.Oathkeeper.Client.Model
{
    /// <summary>
    /// OathkeeperUpstream
    /// </summary>
    [DataContract(Name = "Upstream")]
    public partial class OathkeeperUpstream : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OathkeeperUpstream" /> class.
        /// </summary>
        /// <param name="preserveHost">PreserveHost, if false (the default), tells ORY Oathkeeper to set the upstream request&#39;s Host header to the hostname of the API&#39;s upstream&#39;s URL. Setting this flag to true instructs ORY Oathkeeper not to do so..</param>
        /// <param name="stripPath">StripPath if set, replaces the provided path prefix when forwarding the requested URL to the upstream URL..</param>
        /// <param name="url">URL is the URL the request will be proxied to..</param>
        public OathkeeperUpstream(bool preserveHost = default(bool), string stripPath = default(string), string url = default(string))
        {
            this.PreserveHost = preserveHost;
            this.StripPath = stripPath;
            this.Url = url;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// PreserveHost, if false (the default), tells ORY Oathkeeper to set the upstream request&#39;s Host header to the hostname of the API&#39;s upstream&#39;s URL. Setting this flag to true instructs ORY Oathkeeper not to do so.
        /// </summary>
        /// <value>PreserveHost, if false (the default), tells ORY Oathkeeper to set the upstream request&#39;s Host header to the hostname of the API&#39;s upstream&#39;s URL. Setting this flag to true instructs ORY Oathkeeper not to do so.</value>
        [DataMember(Name = "preserve_host", EmitDefaultValue = true)]
        public bool PreserveHost { get; set; }

        /// <summary>
        /// StripPath if set, replaces the provided path prefix when forwarding the requested URL to the upstream URL.
        /// </summary>
        /// <value>StripPath if set, replaces the provided path prefix when forwarding the requested URL to the upstream URL.</value>
        [DataMember(Name = "strip_path", EmitDefaultValue = false)]
        public string StripPath { get; set; }

        /// <summary>
        /// URL is the URL the request will be proxied to.
        /// </summary>
        /// <value>URL is the URL the request will be proxied to.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OathkeeperUpstream {\n");
            sb.Append("  PreserveHost: ").Append(PreserveHost).Append("\n");
            sb.Append("  StripPath: ").Append(StripPath).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
